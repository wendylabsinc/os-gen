steps:
# Set up QEMU for multi-architecture support
- name: 'gcr.io/cloud-builders/docker'
  args: ['run', '--rm', '--privileged', 'multiarch/qemu-user-static', '--reset', '-p', 'yes']

# Build the Docker image
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/${PROJECT_ID}/os-gen-builder', '.']

# Run the build process using the newly created image
- name: 'gcr.io/$PROJECT_ID/os-gen-builder'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "Running in Debian Bookworm"
      which ssh
      which git

      update-binfmts --enable
      # Configure SSH key
      # mkdir -p /root/.ssh
      echo "$$GITHUB_SSH_KEY" > /root/.ssh/id_rsa
      chmod 400 /root/.ssh/id_rsa
      ssh-keyscan -t rsa github.com >> /root/.ssh/known_hosts

      echo "Cloning pi-gen repository"
      # Clone pi-gen repository
      git clone --branch=arm64-marika-dev git@github.com:wendylabsinc/os-gen.git

      # Navigate to pi-gen directory
      cd os-gen

      # Skip stages 3, 4, and 5
      touch ./stage3/SKIP ./stage4/SKIP ./stage5/SKIP
      # Skip image exports for stages 4 and 5
      touch ./stage4/SKIP_IMAGES ./stage5/SKIP_IMAGES

      # Set up environment variables or configuration files as needed
      echo "IMG_NAME='CustomPiImage'" > config

      # Run pi-gen build script
      ./build.sh
  secretEnv: ['GITHUB_SSH_KEY']

availableSecrets:
  secretManager:
  - versionName: projects/172350526574/secrets/GITHUB_SSH_KEY/versions/latest
    env: 'GITHUB_SSH_KEY'
